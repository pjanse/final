{"version":3,"sources":["Components/jansenPortrait.jpg","Components/Image.js","Components/Home.js","Components/About.js","Components/Message.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Image","props","className","src","source","alt","Home","LocalImg","React","Component","About","Message","state","keys","messages","text","inputHandle","e","setState","target","value","postMessageHandle","input","axios","post","then","res","console","log","getLast","catch","err","get","data","key","Object","length","prevState","getMessageHandle","i","this","id","onChange","onClick","map","message","index","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.0aee9799.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jansenPortrait.19d1c8ac.jpg\";","import React from \"react\";\r\n\r\nfunction Image(props) {\r\n  return (\r\n    <div className=\"image\">\r\n      <img src={props.source} alt=\"Tokyo Japan\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Image;","import React from 'react';\r\nimport Image from './Image';\r\nimport LocalImg from './jansenPortrait.jpg';\r\nimport '../App.css';\r\n\r\nclass Home extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n        <div className='Home'>\r\n            <h1>Welcome</h1>\r\n            <Image source={LocalImg} />\r\n        </div>\r\n        )\r\n    }\r\n  }\r\n\r\n  export default Home;","import React from 'react';\r\nimport '../App.css';\r\n\r\nclass About extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n        <div className='About'>\r\n            <h1>Project Information</h1>\r\n            <div>\r\n                This project was created for Web Frame Works at the University of Arkansas Fort Smith.  I have\r\n                created an online host through github and implemented react router for single page routing.  The message\r\n                board page will accept text and create a data entry on firebase.  I was unable to pull the data from the\r\n                server and post it to the page however. \r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n  }\r\n\r\n  export default About;","import React from 'react';\r\nimport axios from \"axios\";\r\nimport '../App.css';\r\n\r\nclass Message extends React.Component{\r\n\r\n    state = {\r\n        keys:[],\r\n        messages:[],\r\n        text: \"\",\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.getMessageHandle();\r\n    }\r\n\r\n    inputHandle = (e) =>{\r\n        this.setState({\r\n            text: e.target.value,\r\n        });\r\n    }\r\n\r\n    postMessageHandle = (input) => {\r\n      axios.post(\"https://frameworks-final.firebaseio.com/message.json\",{\r\n          text: this.state.text,\r\n      }).then((res)=>{\r\n        console.log(res);\r\n        this.getLast();\r\n      }).catch((err)=>{\r\n        console.log(err);\r\n      })\r\n    };\r\n\r\n    getLast = () => {\r\n        axios.get(\"https://frameworks-final.firebaseio.com/message.json\")\r\n        .then(({data})=>{\r\n            var key = Object.keys(data)[Object.keys(data).length-1];\r\n            this.setState((prevState)=>({\r\n                messages:[\r\n                    ...prevState.messages,\r\n                    data[key].text,\r\n                ]\r\n            }))\r\n        })\r\n        .catch((err)=> {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    getMessageHandle = () => {  \r\n        axios.get(\"https://frameworks-final.firebaseio.com/message.json\")\r\n        .then(({data})=>{\r\n            this.setState({\r\n                keys: Object.keys(data)\r\n            })\r\n            console.log(Object.keys(data));\r\n            console.log(Object.keys(data).length)\r\n            console.log(data);\r\n            for(var i = 0; i<Object.keys(data).length;i++){\r\n               var key = Object.keys(data)[i];\r\n                this.setState((prevState)=>({\r\n                    messages:[\r\n                        ...prevState.messages,\r\n                        data[key].text,\r\n                    ]\r\n                }))\r\n                console.log(this.state.messages[i]);\r\n            }\r\n        })\r\n        .catch((err)=> {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <div className='message'>\r\n            <h1>Message Board</h1>\r\n            <div id='addMessage'>\r\n                <input onChange={(e) => this.inputHandle(e)}></input>\r\n                <button className='mbutton' onClick={() =>this.postMessageHandle(this.state.text)}>Post Message</button>\r\n            </div>\r\n            <div className='text'>\r\n                {this.state.messages.map((message,index) => {\r\n                    return (\r\n                        <div key={index} id='message'>\r\n                            {message}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n  }\r\n\r\n  export default Message;","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\nimport Home from './Components/Home';\nimport About from './Components/About';\nimport Message from './Components/Message';\nimport './App.css';\n\nclass App extends React.Component{\n    render(){\n      return (\n        <div className=\"App\">\n          <div>\n            <Router>\n              <nav>\n                <ul className = \"navbar\">\n                  <li>\n                    <Link to=\"/final/\"><button>Home</button></Link>\n                  </li>\n                  <li>\n                    <Link to=\"/final/about\"><button>About page</button></Link>\n                  </li>\n                  <li id='messageLink'>\n                    <Link to=\"/final/message\"><button>Message Board</button></Link>\n                  </li>\n                </ul>\n              </nav>\n              <Switch>\n                <Route exact path=\"/final/\" component={Home}/>\n                <Route  path=\"/final/about\" component={About}/>\n                <Route  path=\"/final/message\" component={Message}/>\n              </Switch>\n            </Router>\n          </div>\n          <div>\n            \n          </div>\n        </div>\n      )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}